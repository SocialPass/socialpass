# Generated by Django 5.0.2 on 2024-03-19 18:29

from django.db import migrations

def migrate_waitlist_status(apps, schema_editor):
    """
    - remove is_waiting_list and handle migration.
        - If a session has is_waiting_list, and is NOT fulfilled, then waitlist_status="WAITLIST_JOINED"
        - If a session has is_waiting_list, and is fulfilled, then waitlist_status="WAITLIST_APPROVED"
    - remove skip_validation and handle migration.
        - If a session has skip_validation, then waitlist_status="WAITLIST_APPROVED".
    """
    CheckoutSession = apps.get_model('root', 'CheckoutSession')

    # Get all ticket sessions
    sessions = CheckoutSession.objects.all()

    from apps.root.models import CheckoutSession
    for session in sessions:
        # skip
        if not session.is_waiting_list and not session.skip_validation:
            continue

        # migrate is_waiting_list
        if session.is_waiting_list and session.order_status != CheckoutSession.OrderStatus.FULFILLED:
            session.waitlist_status = CheckoutSession.WaitlistStatus.WAITLIST_JOINED
        if session.is_waiting_list and session.order_status == CheckoutSession.OrderStatus.FULFILLED:
            session.waitlist_status = CheckoutSession.WaitlistStatus.WAITLIST_APPROVED

        # migrate skip_validation
        if session.skip_validation:
            session.waitlist_status = CheckoutSession.WaitlistStatus.WAITLIST_APPROVED

        # save session
        session.save()

class Migration(migrations.Migration):

    dependencies = [
        ("root", "0139_checkoutsession_waitlist_status"),
    ]

    operations = [
        migrations.RunPython(
            migrate_waitlist_status,
            reverse_code=migrations.RunPython.noop
        )
    ]
