from uuid import UUID

from django.apps import apps
from django.core.exceptions import SuspiciousOperation

from . import data


class ModelObjectTracker:
    """Binds and UUID to a model instance. Uses the data_backend to store this mapping"""

    data_backend = data.SessionBasedAFRMetaData

    def __init__(self, request, uuid: str | UUID):
        self.request = request
        self.data = self.data_backend(request)
        self.uuid = self.data.safe_cast_to_uuid(uuid)

        try:
            obj_data = self.data[uuid]
        except KeyError:
            raise SuspiciousOperation("Tracking UUID was not generated by the ModelObjectTracker")
        else:
            if self.__data_has_object(obj_data):
                self.__bound_object = self.__deserialize_object(obj_data)
                if self.__bound_object is None:
                    # the bound object was deleted from the database. safe to bust the data
                    self.__safe_bust_uuid()
            else:
                self.__bound_object = None

    @classmethod
    def start_new_tracking(cls, request) -> UUID:
        data = cls.data_backend(request)
        uuid = cls.new_uuid()
        data[uuid] = {}
        return uuid

    @property
    def bound_object(self):
        return self.__bound_object

    @classmethod
    def new_uuid(cls):
        return cls.data_backend.safe_cast_to_uuid(None, create=True)

    def bind(self, object):
        self.__bound_object = object
        self.data[self.uuid] = self.__serialize_object(self.__bound_object)

    def has_bound_object(self):
        return self.bound_object is not None

    def __safe_bust_uuid(self):
        self.data.set_new_data(self.uuid)

    def __data_has_object(self, obj_data: dict):
        if not obj_data:
            return False

        return bool(obj_data['pk'])

    def __serialize_object(self, object):
        return {
            'pk': object.pk,
            'model_app': object._meta.app_label,
            'model_name': object.__class__.__name__
        }

    def __deserialize_object(self, obj_data):
        Model = apps.get_model(
            obj_data['model_app'], obj_data['model_name']
        )
        try:
            instance = Model.objects.get(pk=obj_data['pk'])
        except Model.objects.DoesNotExist:
            instance = None

        return instance
